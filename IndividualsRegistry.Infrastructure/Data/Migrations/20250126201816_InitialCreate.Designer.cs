// <auto-generated />
using System;
using IndividualsRegistry.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IndividualsRegistry.Infrastructure.Data.Migrations
{
    [DbContext(typeof(IndividualsDbContext))]
    [Migration("20250126201816_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("IndividualsRegistry.Domain.Entities.CityEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("IndividualsRegistry.Domain.Entities.IndividualEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("Date");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("NVarChar");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVarChar");

                    b.Property<string>("PersonalId")
                        .IsRequired()
                        .HasColumnType("NVarChar");

                    b.Property<byte[]>("Picture")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("NVarChar");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Individuals", null, t =>
                        {
                            t.HasCheckConstraint("CK_Gender", "Gender IN ('Male', 'Female')");

                            t.HasCheckConstraint("CK_Name_Characters", "Name NOT LIKE '%[^a-zA-Zა-ჰ]%'");

                            t.HasCheckConstraint("CK_Name_Length", "LEN(Name) >= 2 AND LEN(Name) <= 50");

                            t.HasCheckConstraint("CK_PersonalId", "PersonalId LIKE '[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]'");

                            t.HasCheckConstraint("CK_Surname_Characters", "Surname NOT LIKE '%[^a-zA-Zა-ჰ]%'");

                            t.HasCheckConstraint("CK_Surname_Length", "LEN(Surname) >= 2 AND LEN(Surname) <= 50");
                        });
                });

            modelBuilder.Entity("IndividualsRegistry.Domain.Entities.PhoneNumberEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Individualid")
                        .HasColumnType("Int");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Individualid");

                    b.ToTable("PhoneNumbers", null, t =>
                        {
                            t.HasCheckConstraint("CK_PhoneNumberType", "Type IN ('Mobile', 'Office', 'Home')");
                        });
                });

            modelBuilder.Entity("IndividualsRegistry.Domain.Entities.RelationEntity", b =>
                {
                    b.Property<int>("IndividualId")
                        .HasColumnType("Int");

                    b.Property<int>("RelatedIndividualId")
                        .HasColumnType("Int");

                    b.Property<int>("RelationType")
                        .HasColumnType("int");

                    b.HasKey("IndividualId", "RelatedIndividualId");

                    b.HasIndex("RelatedIndividualId");

                    b.ToTable("Relations");
                });

            modelBuilder.Entity("IndividualsRegistry.Domain.Entities.IndividualEntity", b =>
                {
                    b.HasOne("IndividualsRegistry.Domain.Entities.CityEntity", "City")
                        .WithMany("Individuals")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("City");
                });

            modelBuilder.Entity("IndividualsRegistry.Domain.Entities.PhoneNumberEntity", b =>
                {
                    b.HasOne("IndividualsRegistry.Domain.Entities.IndividualEntity", "Individual")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("Individualid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Individual");
                });

            modelBuilder.Entity("IndividualsRegistry.Domain.Entities.RelationEntity", b =>
                {
                    b.HasOne("IndividualsRegistry.Domain.Entities.IndividualEntity", null)
                        .WithMany()
                        .HasForeignKey("IndividualId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IndividualsRegistry.Domain.Entities.IndividualEntity", null)
                        .WithMany()
                        .HasForeignKey("RelatedIndividualId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IndividualsRegistry.Domain.Entities.CityEntity", b =>
                {
                    b.Navigation("Individuals");
                });

            modelBuilder.Entity("IndividualsRegistry.Domain.Entities.IndividualEntity", b =>
                {
                    b.Navigation("PhoneNumbers");
                });
#pragma warning restore 612, 618
        }
    }
}
